<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
			http://www.springframework.org/schema/aop
    			http://www.springframework.org/schema/aop/spring-aop.xsd
    			http://www.springframework.org/schema/tx
    			http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 如果需要缓存服务，则需要下面 ,分别是，开启缓存和声明缓存管理器-->
	<!-- <cache:annotation-driven/>
	<bean id="" class="org.springframework.cache.concurrent.ConcurrentMapCacheManager"/> -->
	<!-- <import resource="cache-config.xml"/> -->
	<context:component-scan base-package="com.zhenyu.sys.realm"/>
	<context:component-scan base-package="com.zhenyu.sys.mapper" />
	<context:component-scan base-package="com.zhenyu.sys.service" />
	<context:component-scan base-package="com.zhenyu.service" />
	<context:component-scan base-package="com.zhenyu.mapper" />
	<context:component-scan base-package="com.zhenyu.common.ippojo" />
	<!-- <context:component-scan base-package="com.zhenyu.sys.mapper" />
	<context:component-scan base-package="com.zhenyu.sys.service" /> -->
	<!-- 在该版本下，只能有一个properties，因为spring只能这样读一次 -->
	<!-- <context:property-placeholder location="classpath*:redis.properties"/> -->
	<!-- location="classpath:config/wzk.properties,classpath:config/mongodb.properties" -->
	<!-- 对于下面这种引入文件的方式，org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
	如果需要引入多个，那么可以使用<property><list><value></value></list></property>方法 -->
	<bean id="propertyConfigurer" class="com.zhenyu.common.encry.EncryptPlaceHolderConfigure">
		<property name="location" value="classpath:jdbc.properties" />
		<property name="fileEncoding" value="utf-8" />
	</bean>
	<!-- <bean class="com.zhenyu.websocket.WebSocketConfig"/>
	<bean class="com.zhenyu.websocket.WebSocketHandlering"/> -->
	<!-- 数据库部分 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" /> 
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="maxIdle" value="${maxIdle}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxWait" value="${maxWait}" />
	</bean>
	<!-- redis部分,两个配置，和一个template，利用template可以操作redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast 
			to String！！ -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
<!-- 		开启事务 -->
		<property name="enableTransactionSupport" value="true"></property>
	</bean>



	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:mybatis-conf.xml" /> -->
		<property name="mapperLocations" value="classpath:com/zhenyu/mapper/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zhenyu.mapper,com.zhenyu.sys.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    
	<!-- 如果想使用事务注解，那么就必须使用下面这一句话！！！ <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- 如果使用xml形式，那么就是用	
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="testService"
			expression="execution (* com.baobao.service.MyBatisService.*(..))" />
		<aop:advisor advice-ref="advice" pointcut-ref="testService" />
	</aop:config> -->
	<!-- 新增security模块 -->
	<!-- <beans> <import resource="spring-security.xml"/> </beans> -->


	<!-- 最后一部分，就是aop部分，不适用注解，使用xml配置的形式，如下： -->
	<!-- 一定是有，1.切点。至于通知和切面，可以使用下面这一种和上面这一种方式来 -->
	<!-- <aop:config>
		<aop:aspect ref="某个类的id">
		 <aop:pointcut expression="* *.某方法(..)" id="aaa"/>
		 <aop:before method="" pointcut-ref="aaa"/>
		</aop:aspect>
	</aop:config> -->
</beans>